{"version":3,"sources":["App.js","serviceWorker.js","index.js","userProfile.js","Images/Octocat.jpg"],"names":["getItemStyles","order","down","originalIndex","curIndex","y","index","scale","zIndex","shadow","immediate","n","indexOf","user","name","gitHubUserName","styles","container","height","display","flexDirection","justifyContent","alignItems","maxWidth","list","position","width","item","overflow","pointerEvents","transformOrigin","borderRadius","color","fontWeight","lineHeight","fontSize","textTransform","textAlign","letterSpacing","Boolean","window","location","hostname","match","items","split","ReactDOM","render","react_default","a","createElement","props","correctOrder","_useState","useState","map","_useState2","Object","slicedToArray","currentOrder","setCurrentOrder","_useSprings","useSprings","length","_useSprings2","springs","setSprings","tempOrder","bind","useGesture","_ref","delta","args","curRow","clamp","Math","round","newOrder","swap","style","objectSpread","className","_ref2","i","web","div","assign","key","boxShadow","interpolate","s","concat","transform","children","isEqual","fontFamily","src","pic","alt","href","userProfile","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0e8351e7.chunk.js","sourcesContent":["// Inspired By: https://codesandbox.io/embed/r5qmj8m6lq\nimport React, { useState } from 'react';\nimport clamp from 'lodash/clamp';\nimport isEqual from 'lodash/isEqual';\nimport swap from 'lodash-move';\nimport { useGesture } from 'react-with-gesture';\nimport { useSprings, animated, interpolate } from 'react-spring';\n//import { superFancyEncrypter } from './helpers/decoder.helper';\nimport { userProfile } from './userProfile';\n\n// Returns fitting styles for dragged/idle items\nconst getItemStyles = (order, down, originalIndex, curIndex, y) => index => {\n  return down && index === originalIndex // if mouse down and current item\n    ? { y: curIndex * 100 + y, scale: 1.1, zIndex: '1', shadow: 15, immediate: n => n === 'y' || n === 'zIndex' }\n    : { y: order.indexOf(index) * 100, scale: 1, zIndex: '0', shadow: 1, immediate: false };\n};\n\n//const gitHubUserName = `aarivalagan`;\nconst user = {\n  name: \"Atchaya\",\n  gitHubUserName: \"aarivalagan\"\n};\n\nexport function App(props) {\n  const { items, correctOrder } = props;\n\n  // Track the current indices representing the item order\n  const [currentOrder, setCurrentOrder] = useState(items.map((item, index) => index));\n\n  // Create springs, each corresponds to an item, controlling its transform, scale, etc.\n  const [springs, setSprings] = useSprings(items.length, getItemStyles(currentOrder));\n\n  // Store current order indices as a mutable array, to assist with animating without causing unnecessary re-renders\n  let tempOrder = currentOrder;\n\n  const bind = useGesture(({ down, delta, args }) => {\n    const [originalIndex] = args;\n    const [, y] = delta;\n    const curIndex = tempOrder.indexOf(originalIndex);\n    const curRow = clamp(Math.round((curIndex * 100 + y) / 100), 0, items.length - 1);\n    const newOrder = swap(tempOrder, curIndex, curRow);\n    // Feed springs new style data\n    setSprings(getItemStyles(newOrder, down, originalIndex, curIndex, y));\n    if (!down) {\n      tempOrder = newOrder;\n      setCurrentOrder(newOrder);\n    }\n  });\n\n\n  return (\n    <div style={styles.container}>\n      <div style={{ ...styles.list, height: items.length * 100 }} className=\"content\">\n        {springs.map(({ zIndex, shadow, y, scale }, i) => {\n          return (\n            <animated.div\n              key={i}\n              {...bind(i)}\n              style={{\n                ...styles.item,\n                zIndex,\n                boxShadow: shadow.interpolate(s => `rgba(0, 0, 0, 0.15) 0px ${s}px ${2 * s}px 0px`),\n                transform: interpolate([y, scale], (y, s) => `translate3d(0,${y}px,0) scale(${s})`),\n              }}\n              children={items[i]}\n            />\n          );\n        })}\n      </div>\n      {isEqual(currentOrder, correctOrder) && (\n        <span style={{ color: 'white', fontSize: 16, fontFamily: 'monospace' }}>\n        testing\n          {/* {superFancyEncrypter(superFancyEncryptedMessage)}*/ }\n          { userProfile(user) }\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    maxWidth: 400,\n  },\n  list: {\n    position: 'relative',\n    width: 320,\n    height: 240,\n  },\n  item: {\n    position: 'absolute',\n    width: 320,\n    height: 90,\n    overflow: 'visible',\n    pointerEvents: 'auto',\n    transformOrigin: '50% 50% 0px',\n    borderRadius: 5,\n    color: '#FFF',\n    fontWeight: 600,\n    lineHeight: '90px',\n    fontSize: 14.5,\n    textTransform: 'uppercase',\n    textAlign: 'center',\n    letterSpacing: 2,\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst items = 'code me show the'.split(' ');\nconst correctOrder = [2, 1, 3, 0];\nReactDOM.render(<App items={items} correctOrder={correctOrder} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './index.css';\nimport pic from './Images/Octocat.jpg'\n\n//{String} gitHubUserName;\n\nexport function userProfile(props){\n\n    const {gitHubUserName, name } = props;\n    //console.log(\"grsgsgfs-->\",props);\n    //const gitHubUserName = props;\n    //console.log(\"hhhhhhhh->\",gitHubUserName);\n    var style = {\n        height: 50,\n        width: 100\n    };\n    return(\n        <div className=\"flex-container\">\n            <div>\n                <img src={pic} alt=\"atch\" style={style}></img>\n                { name }\n            </div>\n            <div>GitHub Username: <a href=\"https://github.com/aarivalagan\">{gitHubUserName}</a></div>\n            <div>Resume: <a href=\"https://drive.google.com/file/d/1iLS0M39mdYHqRQqyn4zVfzFtf9dl5U6U/view?usp=sharing\">Resume</a></div>\n        </div>\n    );\n}","module.exports = __webpack_public_path__ + \"static/media/Octocat.5d292e21.jpg\";"],"sourceRoot":""}